//file:noinspection GroovyAssignabilityCheck

import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id "java"
    id "checkstyle"
    id "com.github.spotbugs" version "4.7.9"
    id "org.cadixdev.licenser" version "0.6.1"
}

group = "com.github.donotspampls.ezprotector"
version = "2.0"

compileJava.options.encoding = "UTF-8"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
    maven {
        name = "paper-repo"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "sponge-repo"
        url = "https://repo.spongepowered.org/maven/"
    }
    maven {
        name = "velocitypowered-repo"
        url = "https://nexus.velocitypowered.com/repository/maven-public/"
    }
    maven {
        name = "placeholderapi-repo"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.+"
    annotationProcessor "com.velocitypowered:velocity-api:3.+"

    compileOnly "io.github.waterfallmc:waterfall-api:1.17-R0.1-SNAPSHOT"

    compileOnly "org.spongepowered:spongeapi:7.3.0"

    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT" // TODO: 1.17 api
    compileOnly "me.clip:placeholderapi:2.10.10"

    compileOnly "com.github.spotbugs:spotbugs-annotations:4.4.1"
}

processResources {
    expand project.properties
}

license {
    header = project.rootProject.file("HEADER.txt")
}

checkstyle {
    toolVersion "9.0.1"
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = [configDirectory: "${project.rootDir}/config/checkstyle"]

    // The build should immediately fail if we have errors.
    maxErrors = 0
    maxWarnings = 0
}

tasks.withType(SpotBugsTask) {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = "fancy-hist.xsl"
        }
    }
}

sourceSets.main.java.srcDir(tasks.register("generateTemplates", Copy) { task ->
    def props = [
            "version": project.version
    ]
    task.inputs.properties props

    task.from file("src/main/templates")
    task.into layout.buildDirectory.dir("../build/generated/sources/templates")
    task.expand props
}.map {
    it.outputs
})
